'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

require('es6-promise/auto');

var _event = require('./event');

var _event2 = _interopRequireDefault(_event);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _aes = require('crypto-js/aes');

var _aes2 = _interopRequireDefault(_aes);

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.4.1
var request;

request = require('superagent');

window.BootPay = {
  VISIT_TIMEOUT: 86400000, // 재 방문 시간에 대한 interval
  SK_TIMEOUT: 1800000, // 30분
  CONFIRM_LOCK: false,
  applicationId: void 0,
  version: '3.0.4-beta1',
  mode: 'production',
  backgroundId: 'bootpay-background-window',
  windowId: 'bootpay-payment-window',
  iframeId: 'bootpay-payment-iframe',
  closeId: 'bootpay-progress-button-window',
  popupWatchInstance: void 0,
  popupInstance: void 0,
  popupData: void 0,
  ieMinVersion: 9,
  deviceType: 1,
  ableDeviceTypes: {
    JS: 1,
    ANDROID: 2,
    IOS: 3
  },
  methods: {},
  params: {},
  option: {},
  phoneRegex: /^\d{2,3}\d{3,4}\d{4}$/,
  dateFormat: /(\d{4})-(\d{2})-(\d{2})/,
  zeroPaymentMethod: ['bankalarm', 'auth', 'card_rebill'],
  urls: require('../package.json').urls,
  tk: void 0,
  thirdPartyData: {},
  initialize: function initialize() {
    var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (typeof Element !== "undefined" && Element !== null) {
      _event2.default.startEventBinding();
      this.setLogLevel(logLevel);
      this.setReadyUUID();
      this.setReadySessionKey();
      return this.bindBootpayCommonEvent();
    }
  },
  naverpayZzimUrl: function naverpayZzimUrl() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'production';
    var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pc';

    return this.urls.naverpayZzimUrl[mode][platform];
  },
  restUrl: function restUrl() {
    return this.urls.restUrl[this.mode];
  },
  clientUrl: function clientUrl() {
    return this.urls.clientUrl[this.mode];
  },
  analyticsUrl: function analyticsUrl() {
    return this.urls.analyticsUrl[this.mode];
  },
  isMobile: function isMobile() {
    var a;
    a = navigator.userAgent || navigator.vendor || window.opera;
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
    );
  },
  isMobileSafari: function isMobileSafari() {
    var agent;
    agent = window.navigator.userAgent;
    return agent.match(/iPad/i) || agent.match(/iPhone/i);
  },
  // meta tag에서 application id를 찾는다.
  setApplicationId: function setApplicationId() {
    var applicationId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

    var metaTag;
    if (applicationId != null) {
      return this.applicationId = applicationId;
    } else {
      metaTag = document.querySelector('meta[name="bootpay-application-id"]');
      if (metaTag != null) {
        return this.applicationId = metaTag.getAttribute('content');
      } else {
        return alert('<meta name="bootpay-application-id" content="[Application ID를 입력]" /> 다음과 같이 <head>안에 넣어주세요');
      }
    }
  },
  //  로그 레벨을 설정한다.
  setLogLevel: function setLogLevel() {
    var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    return _logger2.default.setLogLevel(logLevel);
  },
  setMode: function setMode(mode) {
    return this.mode = mode;
  },
  //----------------------------------------------------------
  // UUID가 없을 경우 바로 LocalStorage에 저장한다.
  // Comment by Gosomi
  // Date: 2018-04-29
  //----------------------------------------------------------
  setReadyUUID: function setReadyUUID() {
    var ref;
    if (!((ref = this.getData('uuid')) != null ? ref.length : void 0)) {
      return this.setData('uuid', this.generateUUID());
    }
  },
  //----------------------------------------------------------
  // Local Storage에서 데이터를 저장한다.
  // Comment by Gosomi
  // Date: 2018-04-28
  //----------------------------------------------------------
  setData: function setData(key, value) {
    return window.localStorage.setItem(key, value);
  },
  //----------------------------------------------------------
  // Local Storage에서 데이터를 가져온다.
  // Comment by Gosomi
  // Date: 2018-04-28
  //----------------------------------------------------------
  getData: function getData(key) {
    return window.localStorage.getItem(key);
  },
  // device Type을 설정한다. 없을 경우 false를 리턴, 있는 경우 true를 리턴
  setDevice: function setDevice(deviceType) {
    if (this.ableDeviceTypes[deviceType] != null) {
      this.deviceType = this.ableDeviceTypes[deviceType];
    }
    return this.ableDeviceTypes[deviceType] != null;
  },
  // Parent 혹은 Opener에서 데이터를 가져와 통계 데이터를 동기화한다.
  setAnalyticsDataByParent: function setAnalyticsDataByParent(parent) {
    return parent.postMessage(JSON.stringify({
      action: 'BootpayAnalyticsData'
    }), '*');
  },
  // 기본적인 통계 데이터를 설정한다.
  // Android, iPhone에서 기본적으로 사용하는 코드
  setAnalyticsData: function setAnalyticsData(data) {
    if (data.uuid != null) {
      this.setData('uuid', data.uuid);
    }
    if (data.sk != null) {
      this.setData('sk', data.sk);
    }
    if (data.sk_time != null) {
      this.setData('sk_time', data.sk_time);
    }
    if (data.time != null) {
      return this.setData('time', data.time);
    }
  },
  // 로그인한 유저 정보를 가져온다.
  getUserData: function getUserData() {
    try {
      return JSON.parse(this.getData('user'));
    } catch (error1) {
      return void 0;
    }
  },
  // Javascript로 UUID를 생성한다.
  generateUUID: function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  },
  // 로그인 했을때 데이터를 저장한다.
  setUserData: function setUserData(data) {
    return this.setData('user', JSON.stringify(data));
  },
  // 세션 키를 발급하는 로직
  setReadySessionKey: function setReadySessionKey() {
    var lastTime, ref, ref1, sessionKeyTime;
    sessionKeyTime = new Date().getTime();
    if ((ref = this.getData('last_time')) != null ? ref.length : void 0) {
      sessionKeyTime = new Date().getTime();
      if ((ref1 = this.getData('last_time')) != null ? ref1.length : void 0) {
        lastTime = parseInt(this.getData('last_time')); // 마지막으로 접근한 시간을 기록한다.
        this.setData('last_time', sessionKeyTime);
        if (isNaN(lastTime) || lastTime + this.SK_TIMEOUT < sessionKeyTime) {
          // 마지막 접속한 시간에 30분이 지나버린 경우 세션을 초기화한다.
          this.setData('sk', this.getData('uuid') + '-' + sessionKeyTime);
          this.setData('sk_time', sessionKeyTime);
          this.setData('time', sessionKeyTime - lastTime);
          return _logger2.default.debug('\uC2DC\uAC04\uC774 \uC9C0\uB098 \uC138\uC158 \uACE0\uC720 \uAC12 \uC815\uBCF4\uB97C \uC0C8\uB85C \uAC31\uC2E0\uD558\uC600\uC2B5\uB2C8\uB2E4. sk: ' + this.getData('sk') + ', time: ' + this.getData('sk_time'));
        } else {
          return _logger2.default.debug('\uC774\uC804 \uC138\uC158\uC744 \uADF8\uB300\uB85C \uC774\uC6A9\uD569\uB2C8\uB2E4. sk: ' + this.getData('sk') + ', time: ' + this.getData('sk_time'));
        }
      }
    } else {
      this.setData('last_time', sessionKeyTime);
      this.setData('sk', this.getData('uuid') + '-' + sessionKeyTime);
      this.setData('sk_time', sessionKeyTime);
      return _logger2.default.debug("처음 접속하여 세션 고유 값을 설정하였습니다.");
    }
  },
  // 로그인 정보를 절차에 따라 초기화한다.
  expireUserData: function expireUserData() {
    var data;
    data = this.getUserData();
    // 데이터가 없거나 접속 한지 하루가 지나면 데이터를 삭제한다.
    if (data != null && data.time + this.VISIT_TIMEOUT < new Date().getTime()) {
      _logger2.default.info("시간이 지나 로그인 유저 정보를 초기화 하였습니다.");
      return this.setData('user', null);
    }
  },
  // 통계 시작
  startTrace: function startTrace() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;

    var ref;
    if (!((ref = this.applicationId) != null ? ref.length : void 0)) {
      this.setApplicationId();
    }
    this.expireUserData();
    return this.sendCommonData(data);
  },
  // 통계용 데이터를 부트페이로 전송
  sendCommonData: function sendCommonData(data) {
    var encryptData, items, ref, ref1, requestData, url, user;
    url = document.URL;
    if (!url || url.search(/g-cdn.bootpay.co.kr/) === -1 && url.search(/bootpay.co.kr/) > -1 && url.search(/app.bootpay.co.kr/) === -1) {
      return;
    }
    user = this.getUserData();
    items = data != null && ((ref = data.items) != null ? ref.length : void 0) ? data.items : [{
      cat1: data != null ? data.cat1 : void 0,
      cat2: data != null ? data.cat2 : void 0,
      cat3: data != null ? data.cat3 : void 0,
      item_img: data != null ? data.item_img : void 0,
      item_name: data != null ? data.item_name : void 0,
      unique: data != null ? data.unique : void 0,
      price: data != null ? data.price : void 0
    }];
    requestData = {
      application_id: this.applicationId,
      uuid: this.getData('uuid'),
      time: this.getData('time'),
      url: data != null && data.url != null ? data.url : document.URL,
      referer: ((ref1 = document.referrer) != null ? ref1.length : void 0) && document.referrer.search(new RegExp(window.location.hostname)) === -1 ? document.referrer : '',
      sk: this.getData('sk'),
      user_id: user != null ? user.id : void 0,
      page_type: data != null ? data.type : void 0,
      items: items
    };
    _logger2.default.debug('\uD65C\uB3D9 \uC815\uBCF4\uB97C \uC11C\uBC84\uB85C \uC804\uC1A1\uD569\uB2C8\uB2E4. data: ' + JSON.stringify(requestData));
    encryptData = _aes2.default.encrypt(JSON.stringify(requestData), requestData.sk);
    return request.post([this.analyticsUrl(), 'call?ver=' + this.version].join('/')).set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8').send({
      data: encryptData.ciphertext.toString(_encBase2.default),
      session_key: encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default)
    }).then(function (res) {
      if (res.status !== 200 || res.body.status !== 200) {
        return _logger2.default.warn('BOOTPAY MESSAGE: ' + res.body.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.');
      }
    }).catch(function (err) {
      return _logger2.default.warn('BOOTPAY MESSAGE: ' + err.body.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.');
    });
  },
  // 로그인 정보를 부트페이 서버로 전송한다.
  startLoginSession: function startLoginSession(data) {
    var e;
    try {
      if (data == null) {
        throw '로그인 데이터를 입력해주세요.';
      }
      if (data.id == null) {
        throw '로그인 하는 아이디를 입력해주세요.';
      }
    } catch (error1) {
      e = error1;
      _logger2.default.error(e);
      alert(e);
      throw e;
    }
    return this.sendLoginData({
      application_id: data.application_id != null ? data.application_id : this.applicationId,
      id: data.id,
      username: data.username,
      birth: data.birth,
      phone: data.phone,
      email: data.email,
      gender: data.gender,
      area: data.area != null ? String(data.area).match(/서울|인천|대구|광주|부산|울산|경기|강원|충청북도|충북|충청남도|충남|전라북도|전북|전라남도|전남|경상북도|경북|경상남도|경남|제주|세종|대전/) : void 0
    });
  },
  // 부트페이 서버로 데이터를 전송한다.
  sendLoginData: function sendLoginData(data) {
    var _this = this;

    var encryptData, ref;
    if (data == null || document.URL == null) {
      return;
    }
    _logger2.default.debug('\uB85C\uADF8\uC778 \uB370\uC774\uD130\uB97C \uC804\uC1A1\uD569\uB2C8\uB2E4. data: ' + JSON.stringify(data));
    data.area = ((ref = data.area) != null ? ref.length : void 0) ? data.area[0] : void 0;
    encryptData = _aes2.default.encrypt(JSON.stringify(data), this.getData('sk'));
    return request.post([this.analyticsUrl(), 'login?ver=' + this.version].join('/')).set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8').send({
      data: encryptData.ciphertext.toString(_encBase2.default),
      session_key: encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default)
    }).then(function (res) {
      var json;
      if (res.status !== 200 || res.body.status !== 200) {
        return _logger2.default.warn('BOOTPAY MESSAGE: ' + res.body.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.');
      } else {
        json = res.body.data;
        return _this.setUserData({
          id: json.user_id,
          time: new Date().getTime()
        });
      }
    }).catch(function (err) {
      return _logger2.default.warn('BOOTPAY MESSAGE: ' + err.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.');
    });
  },
  // 결제 정보를 보내 부트페이에서 결제 정보를 띄울 수 있게 한다.
  request: function request(data) {
    var e, encryptData, html, ref, ref1, ref2, ref3, user;
    this.bindBootpayPaymentEvent();
    this.removePaymentWindow(false);
    this.setConfirmLock(false);
    try {
      user = this.getUserData();
      if (data.application_id != null) {
        // 결제 효청시 application_id를 입력하면 덮어 씌운다. ( 결제 이후 버그를 줄이기 위한 노력 )
        this.applicationId = data.application_id;
      }
      this.tk = this.generateUUID() + '-' + new Date().getTime();
      this.params = {
        application_id: this.applicationId,
        show_agree_window: data.show_agree_window != null ? data.show_agree_window : 0,
        device_type: this.deviceType,
        method: data.method != null ? data.method : void 0,
        methods: data.methods != null ? data.methods : void 0,
        boot_key: data.boot_key != null ? data.boot_key : void 0,
        pg: data.pg != null ? data.pg : void 0,
        name: data.name,
        items: ((ref = data.items) != null ? ref.length : void 0) ? data.items : void 0,
        redirect_url: data.redirect_url != null ? data.redirect_url : '',
        return_url: data.return_url != null ? data.return_url : '',
        phone: ((ref1 = data.phone) != null ? ref1.length : void 0) ? data.phone.replace(/-/g, '') : '',
        uuid: ((ref2 = data.uuid) != null ? ref2.length : void 0) ? data.uuid : this.getData('uuid'),
        order_id: data.order_id != null ? String(data.order_id) : '',
        use_order_id: data.use_order_id != null ? data.use_order_id : 0,
        user_info: data.user_info != null ? data.user_info : void 0,
        order_info: data.order_info != null ? data.order_info : {}, // 네이버페이 order 정보
        sk: this.getData('sk'),
        time: this.getData('time'),
        price: data.price,
        tax_free: data.tax_free != null ? data.tax_free : 0,
        format: data.format != null ? data.format : 'json',
        params: data.params != null ? data.params : void 0,
        user_id: user != null ? user.id : void 0,
        path_url: document.URL,
        extra: data.extra != null ? data.extra : void 0,
        account_expire_at: data.account_expire_at != null ? data.account_expire_at : void 0,
        tk: this.tk,
        third_party: this.thirdPartyData
      };
      // 각 함수 호출 callback을 초기화한다.
      this.methods = {};
      if ((ref3 = this.params.items) != null ? ref3.length : void 0) {
        // 아이템 정보의 Validation
        this.integrityItemData();
      }
      if (this.params.method == null || this.params.method === 'auth') {
        // 결제 정보 데이터의 Validation
        this.integrityParams();
      }
      // True, False의 데이터를 1, 0으로 변경하는 작업을 한다
      this.generateTrueFalseParams();
      // 데이터를 AES로 암호화한다.
      encryptData = _aes2.default.encrypt(JSON.stringify(this.params), this.params.sk);
      html = '<div id="' + this.windowId + '">\n  <form name="bootpay_form" action="' + [this.restUrl(), 'start', 'js', '?ver=' + this.version].join('/') + '" method="POST">\n    <input type="hidden" name="data" value="' + encryptData.ciphertext.toString(_encBase2.default) + '" />\n    <input type="hidden" name="session_key" value="' + encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default) + '" />\n  </form>\n  <form id="__BOOTPAY_TOP_FORM__" name="__BOOTPAY_TOP_FORM__" action="' + [this.restUrl(), 'continue'].join('/') + '" method="post">\n  </form>\n  <form id="bootpay_confirm_form" name="bootpay_confirm_form" action="' + [this.restUrl(), 'confirm'].join('/') + '" method="POST">\n  </form>\n  <div class="bootpay-window" id="bootpay-background-window">' + this.iframeHtml('') + '</div>\n</div>';
      document.body.insertAdjacentHTML('beforeend', html);
      try {
        document.body.classList.add('bootpay-open');
      } catch (error1) {
        '';
      }
      this.start();
    } catch (error1) {
      e = error1;
      this.sendPaymentStepData({
        step: 'start',
        status: -1,
        e: e
      });
      throw e;
    }
    this.sendPaymentStepData({
      step: 'start',
      status: 1
    });
    return this;
  },
  //  결제 요청 정보 Validation
  integrityParams: function integrityParams() {
    var e, price, ref, ref1, ref2, ref3;
    price = parseFloat(this.params.price);
    try {
      if ((isNaN(price) || price < 1000) && this.zeroPaymentMethod.indexOf(this.params.method) === -1) {
        throw '결제할 금액을 설정해주세요. ( 1,000원 이상, 본인인증/정기 결제요청의 경우엔 0원을 입력해주세요. ) [ params: price ]';
      }
      if (!((ref = this.params.name) != null ? ref.length : void 0)) {
        throw '판매할 상품명을 입력해주세요. [ parmas: name ]';
      }
      if (this.blockIEVersion()) {
        throw '익스플로러 8이하 버전에서는 결제가 불가능합니다.';
      }
      if (((ref1 = this.params.phone) != null ? ref1.length : void 0) && !this.phoneRegex.test(this.params.phone)) {
        throw '휴대폰 번호의 자리수와 형식이 맞지 않습니다. [ params : phone ]';
      }
      if (!((ref2 = this.params.order_id) != null ? ref2.length : void 0)) {
        throw '판매하려는 제품 order_id를 지정해주셔야합니다. 다른 결제 정보와 겹치지 않은 유니크한 값으로 정해서 보내주시기 바랍니다. [ params: order_id ]';
      }
      if (((ref3 = this.params.account_expire_at) != null ? ref3.length : void 0) && !this.dateFormat.test(this.params.account_expire_at) && this.params.method === 'vbank') {
        throw '가상계좌 입금 만료일 포멧이 잘못되었습니다. yyyy-mm-dd로 입력해주세요. [ params: account_expire_at ]';
      }
      if (this.params.methods != null && !Array.isArray(this.params.methods)) {
        throw '선택 제한 결제 수단 설정은 배열 형태로 보내주셔야 합니다. [ params: methods, ex) ["card", "phone"] ]';
      }
    } catch (error1) {
      e = error1;
      alert(e);
      _logger2.default.error(e);
      throw e;
    }
  },
  // 아이템 정보 Validation
  integrityItemData: function integrityItemData() {
    var e;
    try {
      if (!Array.isArray(this.params.items)) {
        throw '아이템 정보가 배열 형태가 아닙니다.';
      }
      return this.params.items.forEach(function (item, index) {
        var ref, ref1;
        if (!((ref = item.item_name) != null ? ref.length : void 0)) {
          throw '\uD1B5\uACC4\uC5D0 \uD544\uC694\uD55C \uC544\uC774\uD15C \uC774\uB984\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. [key: item_name, index: ' + index + '] ';
        }
        if (item.qty == null) {
          throw '\uD1B5\uACC4\uC5D0 \uD544\uC694\uD55C \uC0C1\uD488 \uD310\uB9E4 \uAC1C\uC218\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4. [key: qty, index: ' + index + ']';
        }
        if (isNaN(parseInt(item.qty))) {
          throw '\uC0C1\uD488 \uD310\uB9E4 \uAC1C\uC218\uB97C \uC22B\uC790\uB85C \uC785\uB825\uD574\uC8FC\uC138\uC694. [key: qty, index: ' + index + ']';
        }
        if (!((ref1 = item.unique) != null ? ref1.length : void 0)) {
          throw '\uD1B5\uACC4\uB97C \uC704\uD55C \uC0C1\uD488\uC758 \uACE0\uC720\uAC12\uC744 \uB123\uC5B4\uC8FC\uC138\uC694. [key: unique, index: ' + index + ']';
        }
        if (item.price == null) {
          throw '\uD1B5\uACC4\uB97C \uC704\uD574 \uC0C1\uD488\uC758 \uAC1C\uBCC4 \uAE08\uC561\uC744 \uB123\uC5B4\uC8FC\uC138\uC694. [key: price, index: ' + index + ']';
        }
        if (isNaN(parseInt(item.price))) {
          throw '\uC0C1\uD488\uAE08\uC561\uC740 \uC22B\uC790\uB85C\uB9CC \uAC00\uB2A5\uD569\uB2C8\uB2E4. [key: price, index: ' + index + ']';
        }
      });
    } catch (error1) {
      e = error1;
      alert(e);
      _logger2.default.error(e);
      throw e;
    }
  },
  // True, False -> 1, 0 으로 Generate 한다
  generateTrueFalseParams: function generateTrueFalseParams() {
    var index, key, results;
    for (index in this.params) {
      if (this.params[index] === true) {
        this.params[index] = 1;
      }
      if (this.params[index] === false) {
        this.params[index] = 0;
      }
    }
    if (this.params.extra != null) {
      for (index in this.params.extra) {
        if (this.params.extra[index] === true) {
          this.params.extra[index] = 1;
        }
        if (this.params.extra[index] === false) {
          this.params.extra[index] = 0;
        }
      }
    }
    if (this.params.third_party != null) {
      results = [];
      for (index in this.params.third_party) {
        if (this.params.third_party[index] != null && _typeof(this.params.third_party[index]) === 'object') {
          results.push(function () {
            var results1;
            results1 = [];
            for (key in this.params.third_party[index]) {
              if (this.params.third_party[index][key] === true) {
                this.params.third_party[index][key] = 1;
              }
              if (this.params.third_party[index][key] === false) {
                results1.push(this.params.third_party[index][key] = 0);
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }.call(this));
        } else {
          if (this.params.third_party[index] === true) {
            this.params.third_party[index] = 1;
          }
          if (this.params.third_party[index] === false) {
            results.push(this.params.third_party[index] = 0);
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    }
  },
  // 결제창을 조립해서 만들고 부트페이로 결제 정보를 보낸다.
  // 보낸 이후에 app.bootpay.co.kr로 데이터를 전송한다.
  start: function start() {
    this.progressMessageShow('');
    document.getElementById(this.iframeId).addEventListener('load', this.progressMessageHide);
    document.bootpay_form.target = 'bootpay_inner_iframe';
    return document.bootpay_form.submit();
  },
  notify: function notify(data) {
    var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;

    var _this2 = this;

    var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;
    var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3000;

    var encryptData, ref, ref1, ref2, user;
    this.removePaymentWindow(false);
    user = this.getUserData();
    this.applicationId = data.application_id != null ? data.application_id : this.applicationId;
    this.params = {};
    this.params.device_type = this.deviceType;
    if (data.method != null) {
      this.params.method = data.method;
    }
    this.params.application_id = this.applicationId;
    this.params.name = data.name;
    this.params.user_info = data.user_info;
    this.params.redirect_url = data.redirect_url != null ? data.redirect_url : '';
    this.params.return_url = data.return_url != null ? data.return_url : '';
    this.params.phone = ((ref = data.phone) != null ? ref.length : void 0) ? data.phone.replace(/-/g, '') : '';
    this.params.uuid = ((ref1 = data.uuid) != null ? ref1.length : void 0) ? data.uuid : window.localStorage['uuid'];
    this.params.order_id = data.order_id != null ? String(data.order_id) : void 0;
    this.params.order_info = data.order_info != null ? data.order_info : {}; // 네이버페이 order 정보
    this.params.sk = window.localStorage.getItem('sk');
    this.params.time = window.localStorage.getItem('time');
    this.params.price = data.price;
    if (data.format != null) {
      this.params.format = this.option.format;
    }
    this.params.params = data.params;
    this.params.user_id = user != null ? user.id : void 0;
    this.params.bank_account = data.bank_account != null ? data.bank_account : void 0;
    this.params.bank_name = data.bank_name != null ? data.bank_name : void 0;
    this.params.order_unique = data.order_unique != null ? data.order_unique : 0;
    if ((ref2 = this.params.items) != null ? ref2.length : void 0) {
      this.integrityItemData();
    }
    this.params.items = data.items;
    if (this.params.method == null || !this.params.method !== 'auth') {
      this.integrityParams();
    }
    encryptData = _aes2.default.encrypt(JSON.stringify(this.params), this.getData('sk'));
    return request.post([this.restUrl(), 'notify?ver=' + this.version + '&format=json'].join('/')).set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8').timeout({
      response: timeout,
      deadline: timeout
    }).send({
      data: encryptData.ciphertext.toString(_encBase2.default),
      session_key: encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default)
    }).then(function (res) {
      if (res.status !== 200 || res.body.status !== 200) {
        _logger2.default.error('BOOTPAY MESSAGE: ' + res.body.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.');
        if (error != null) {
          return error.apply(_this2, ['BOOTPAY MESSAGE: ' + res.body.message + ' - Application ID\uAC00 \uC81C\uB300\uB85C \uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.', res.body]);
        }
      } else {
        if (success != null) {
          return success.apply(_this2, [res.body.data]);
        }
      }
    }).catch(function (err) {
      if (error != null) {
        return error.apply(_this2, ['\uC11C\uBC84 \uC624\uB958\uB85C \uC778\uD574 \uACB0\uC81C\uAC00 \uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4. ' + err.message]);
      }
    });
  },
  // 창이 닫혔을 때 이벤트 처리
  bindBootpayPaymentEvent: function bindBootpayPaymentEvent() {
    var _this3 = this;

    window.off('message.BootpayGlobalEvent');
    return window.on('message.BootpayGlobalEvent', function (e) {
      var backgroundSelector, closeSelector, data, iframeSelector, input, isClose, k, ref, v;
      try {
        data = {};
        if (e.data != null && typeof e.data === 'string' && /Bootpay/.test(e.data)) {
          data = JSON.parse(e.data);
        }
        if (data.action != null) {
          data.action = data.action.replace(/Child/g, '');
        }
      } catch (error1) {
        //        console.log data
        e = error1;
        _logger2.default.error('data: ' + e.data + ', ' + e.message + ' json parse error');
        return;
      }
      switch (data.action) {
        case 'BootpayPopup':
          // iFrame창을 삭제한다.
          _this3.popupData = data;
          _this3.progressMessageHide();
          // 아이폰은 사파리 정책상 팝업을 띄우려면 사용자의 직접적인 액션이 있어야 한다.
          if (_this3.isMobileSafari()) {
            return _this3.showProgressButton();
          } else {
            return _this3.startPopupPaymentWindow(data);
          }
          break;
        case 'BootpayFormSubmit':
          ref = data.params;
          for (k in ref) {
            v = ref[k];
            input = document.createElement('INPUT');
            input.setAttribute('type', 'hidden');
            input.setAttribute('name', k);
            input.value = v;
            document.__BOOTPAY_TOP_FORM__.appendChild(input);
          }
          document.__BOOTPAY_TOP_FORM__.action = data.url;
          document.__BOOTPAY_TOP_FORM__.acceptCharset = data.charset;
          return document.__BOOTPAY_TOP_FORM__.submit();
        case 'BootpayCancel':
          _this3.progressMessageShow('취소중입니다.');
          try {
            _this3.clearEnvironment();
            if (_this3.methods.cancel != null) {
              _this3.methods.cancel.call(_this3, data);
            }
          } catch (error1) {
            e = error1;
            _this3.sendPaymentStepData({
              step: 'cancel',
              status: -1,
              e: e
            });
            throw e;
          }
          _this3.sendPaymentStepData({
            step: 'cancel',
            status: 1
          });
          return _this3.removePaymentWindow();
        case 'BootpayBankReady':
          try {
            _this3.clearEnvironment();
            if (_this3.methods.ready != null) {
              _this3.methods.ready.call(_this3, data);
            }
          } catch (error1) {
            e = error1;
            _this3.sendPaymentStepData({
              step: 'ready',
              status: -1,
              e: e
            });
            throw e;
          }
          return _this3.sendPaymentStepData({
            step: 'ready',
            status: 1
          });
        case 'BootpayConfirm':
          _this3.progressMessageShow('승인중입니다.');
          try {
            _this3.clearEnvironment();
            if (_this3.methods.confirm == null) {
              _this3.transactionConfirm(data);
            } else {
              _this3.methods.confirm.call(_this3, data);
            }
          } catch (error1) {
            e = error1;
            _this3.sendPaymentStepData({
              step: 'confirm',
              status: -1,
              e: e
            });
            throw e;
          }
          return _this3.sendPaymentStepData({
            step: 'confirm',
            status: 1
          });
        case 'BootpayResize':
          iframeSelector = document.getElementById(_this3.iframeId);
          backgroundSelector = document.getElementById(_this3.backgroundId);
          closeSelector = document.getElementById(_this3.closeId);
          if (data.reset) {
            iframeSelector.removeAttribute('style');
            backgroundSelector.removeAttribute('style');
            closeSelector.removeAttribute('style');
            return iframeSelector.setAttribute('scrolling', void 0);
          } else {
            iframeSelector.style.setProperty('max-width', data.width);
            iframeSelector.style.setProperty('width', '100%');
            iframeSelector.style.setProperty('height', data.height);
            iframeSelector.style.setProperty('max-height', data.maxHeight);
            if (data.backgroundColor != null) {
              iframeSelector.style.setProperty('background-color', data.backgroundColor);
            }
            if (data.transparentMode === 'true') {
              backgroundSelector.style.setProperty('background-color', 'transparent');
            }
            if (data.showCloseWindow === 'true') {
              closeSelector.style.setProperty('display', 'block');
            }
            // ie 9이하에서는 overflow 속성을 인식하지 못한다.
            iframeSelector.style.overflow = data.overflow;
            if (data.scrolling != null) {
              return iframeSelector.setAttribute('scrolling', data.scrolling);
            }
          }
          break;
        case 'BootpayError':
          try {
            _this3.clearEnvironment();
            if (_this3.methods.error != null) {
              _this3.methods.error.call(_this3, data);
            }
          } catch (error1) {
            e = error1;
            _this3.sendPaymentStepData({
              step: 'error',
              status: -1,
              msg: e
            });
            throw e;
          }
          _this3.sendPaymentStepData({
            step: 'error',
            status: 1
          });
          return _this3.removePaymentWindow();
        case 'BootpayDone':
          _this3.progressMessageHide();
          try {
            _this3.clearEnvironment(data.popup_close);
            _this3.methods.done.call(_this3, data);
          } catch (error1) {
            e = error1;
            _this3.sendPaymentStepData({
              step: 'done',
              status: -1,
              e: e
            });
            throw e;
          }
          _this3.sendPaymentStepData({
            step: 'done',
            status: 1
          });
          isClose = data.is_done_close != null ? data.is_done_close : true;
          if (isClose) {
            return _this3.removePaymentWindow();
          }
          break;
        case 'BootpayClose':
          _this3.progressMessageHide();
          return _this3.removePaymentWindow();
      }
    });
  },
  bindBootpayCommonEvent: function bindBootpayCommonEvent() {
    var _this4 = this;

    window.off('message.BootpayCommonEvent');
    return window.on('message.BootpayCommonEvent', function (e) {
      var data;
      try {
        data = {};
        if (e.data != null && typeof e.data === 'string' && /Bootpay/.test(e.data)) {
          data = JSON.parse(e.data);
        }
      } catch (error1) {
        e = error1;
        _logger2.default.debug('data: ' + e.data + ', ' + e.message + ' json parse error');
        return;
      }
      switch (data.action) {
        case 'BootpayAnalyticsData':
          return e.source.postMessage(JSON.stringify({
            action: 'BootpayAnalyticsReceived',
            uuid: _this4.getData('uuid'),
            sk: _this4.getData('sk'),
            sk_time: _this4.getData('sk_time'),
            time: _this4.getData('time'),
            user: _this4.getData('user')
          }), '*');
        case 'BootpayAnalyticsReceived':
          _logger2.default.debug('receive analytics data: ' + JSON.stringify(data));
          return _this4.setAnalyticsData(data);
      }
    });
  },
  // 결제 실행 단계를 로그로 보낸다.
  sendPaymentStepData: function sendPaymentStepData(data) {
    var encryptData;
    if (this.tk == null || this.applicationId == null) {
      // Transaction key가 없다면 실행할 필요가 없다.
      return;
    }
    data.version = this.version;
    data.tk = this.tk;
    data.application_id = this.applicationId;
    if (data.e != null) {
      data.msg = function () {
        try {
          return data.e.message;
        } catch (error1) {
          return data.e;
        }
      }();
      data.trace = function () {
        try {
          return data.e.stack;
        } catch (error1) {
          return void 0;
        }
      }();
    }
    encryptData = _aes2.default.encrypt(JSON.stringify(data), this.getData('sk'));
    return request.post([this.analyticsUrl(), "event"].join('/')).set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8').send({
      data: encryptData.ciphertext.toString(_encBase2.default),
      session_key: encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default)
    }).then(function (res) {
      return _logger2.default.debug("BOOTPAY MESSAGE: 결제 이벤트 데이터 정보 전송");
    }).catch(function (err) {
      return _logger2.default.error('BOOTPAY MESSAGE: \uACB0\uC81C \uC774\uBCA4\uD2B8 \uB370\uC774\uD130 \uC815\uBCF4 \uC804\uC1A1\uC2E4\uD328 ' + JSON.stringify(err));
    });
  },
  forceClose: function forceClose() {
    if (this.methods.cancel != null) {
      this.methods.cancel.call(this, {
        action: 'BootpayCancel',
        message: '사용자에 의한 취소'
      });
    }
    return this.removePaymentWindow();
  },
  isLtBrowserVersion: function isLtBrowserVersion(version) {
    var idx, sAgent;
    sAgent = window.navigator.userAgent;
    idx = sAgent.indexOf("MSIE");
    if (!(idx > 0)) {
      return false;
    }
    return version > parseInt(sAgent.substring(idx + 5, sAgent.indexOf(".", idx)));
  },
  // IE 버전 blocking
  blockIEVersion: function blockIEVersion() {
    return this.isLtBrowserVersion(this.ieMinVersion);
  },
  // 결제창을 삭제한다.
  removePaymentWindow: function removePaymentWindow() {
    var callClose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var e;
    document.body.style.removeProperty('bootpay-modal-open');
    try {
      document.body.classList.remove('bootpay-open');
    } catch (error1) {
      '';
    }
    if (document.getElementById(this.windowId) != null) {
      document.getElementById(this.windowId).outerHTML = '';
    }
    try {
      if (this.methods.close != null && callClose) {
        this.methods.close(this);
      }
    } catch (error1) {
      e = error1;
      this.sendPaymentStepData({
        step: 'close',
        status: -1,
        e: e
      });
      throw e;
    }
    this.sendPaymentStepData({
      step: 'close',
      status: 1
    });
    return this.tk = void 0;
  },
  // 결제할 iFrame 창을 만든다.
  iframeHtml: function iframeHtml(url) {
    return '<iframe id="' + this.iframeId + '" name="bootpay_inner_iframe" src="' + url + '" allowtransparency="true" scrolling="no"></iframe>\n<div class="progress-message-window" id="bootpay-progress-message">\n  <div class="progress-message spinner">\n    <div class="bounce1 bounce"></div><div class="bounce2 bounce"></div><div class="bounce3 bounce"></div>         &nbsp;\n    <span class="text" id="progress-message-text"></span>\n  </div>\n</div>\n<div class="progress-message-window over" id="bootpay-progress-button-window">\n  <div class="close-message-box">\n    <div class="close-popup">\n      <h4 class="sub-title">\uC120\uD0DD\uD558\uC2E0 \uACB0\uC81C\uB294 \uD31D\uC5C5\uC73C\uB85C \uACB0\uC81C\uAC00 \uC2DC\uC791\uB429\uB2C8\uB2E4. \uACB0\uC81C\uB97C \uC2DC\uC791\uD560\uAE4C\uC694?</h4>\n      <button class="close-payment-window" onclick="window.BootPay.startPopup();" type="button" id="__bootpay-close-button">\uACB0\uC81C \uC2DC\uC791\uD558\uAE30</button>\n    </div>\n  </div>\n</div>';
  },
  startPopup: function startPopup() {
    return this.startPopupPaymentWindow(this.popupData);
  },
  progressMessageHide: function progressMessageHide() {
    var pms;
    pms = document.getElementById('bootpay-progress-message');
    pms.style.setProperty('display', 'none');
    document.getElementById('progress-message-text').innerText = '';
    try {
      return document.getElementById(this.iframeId).removeEventListener('load', this.progressMessageHide);
    } catch (error1) {}
  },
  progressMessageShow: function progressMessageShow(msg) {
    var pms;
    pms = document.getElementById('bootpay-progress-message');
    pms.style.setProperty('display', 'block');
    return document.getElementById('progress-message-text').innerText = msg;
  },
  showProgressButton: function showProgressButton() {
    var clb;
    clb = document.getElementById(this.closeId);
    return clb.style.setProperty('display', 'block');
  },
  hideProgressButton: function hideProgressButton() {
    var clb;
    clb = document.getElementById(this.closeId);
    return clb.style.setProperty('display', 'none');
  },
  cancel: function cancel(method) {
    this.methods.cancel = method;
    return this;
  },
  confirm: function confirm(method) {
    this.methods.confirm = method;
    return this;
  },
  ready: function ready(method) {
    this.methods.ready = method;
    return this;
  },
  error: function error(method) {
    this.methods.error = method;
    return this;
  },
  done: function done(method) {
    this.methods.done = method;
    return this;
  },
  close: function close(method) {
    this.methods.close = method;
    return this;
  },
  setConfirmLock: function setConfirmLock(lock) {
    return this.CONFIRM_LOCK = lock;
  },
  isConfirmLock: function isConfirmLock() {
    return this.CONFIRM_LOCK;
  },
  clearEnvironment: function clearEnvironment() {
    var isClose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (this.popupWatchInstance) {
      clearInterval(this.popupWatchInstance);
    }
    isClose = isClose != null ? isClose : 1;
    if (this.popupInstance != null && isClose) {
      this.popupInstance.close();
      return this.popupInstance = void 0;
    }
  },
  startPopupPaymentWindow: function startPopupPaymentWindow(data) {
    var _this5 = this;

    var k, query, ref, v;
    document.getElementById(this.iframeId).style.display = 'none';
    this.clearEnvironment();
    this.hideProgressButton();
    this.progressMessageShow('팝업창을 닫으면 종료됩니다.');
    query = [];
    ref = data.params;
    for (k in ref) {
      v = ref[k];
      query.push(k + '=' + v);
    }
    this.popupInstance = window.open(data.submit_url + '?' + query.join('&'), 'bootpay_inner_popup');
    return this.popupWatchInstance = setInterval(function () {
      if (_this5.popupInstance.closed) {
        // 창을 닫은 경우
        if (_this5.popupWatchInstance != null) {
          clearInterval(_this5.popupWatchInstance);
        }
        return window.postMessage(JSON.stringify({
          action: 'BootpayCancel',
          message: '팝업창을 닫았습니다.'
        }), '*');
      }
    }, 3000);
  },
  transactionConfirm: function transactionConfirm(data) {
    var html;
    if (this.isConfirmLock()) {
      console.log('Transaction Lock');
    } else {
      this.setConfirmLock(true);
      if (data == null || data.receipt_id == null) {
        alert('결제 승인을 하기 위해서는 receipt_id 값이 포함된 data값을 함께 보내야 합니다.');
        _logger2.default.error('this.transactionConfirm(data); 이렇게 confirm을 실행해주세요.');
        return;
      }
      html = '<input type="hidden" name="receipt_id" value="' + data.receipt_id + '" />\n<input type="hidden" name="application_id" value="' + this.applicationId + '" />';
      document.getElementById('bootpay_confirm_form').innerHTML = html;
      document.bootpay_confirm_form.action = [this.restUrl(), 'confirm'].join('/');
      document.bootpay_confirm_form.target = 'bootpay_inner_iframe';
      document.bootpay_confirm_form.submit();
    }
    return this;
  },
  // 네이버페이 Zzim 추가 Method
  addNaverPayZzim: function addNaverPayZzim(data) {
    var _this6 = this;

    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;

    var e, encryptData, ref, ref1, ref2, ref3, ref4, requestUrl;
    this.removePaymentWindow(false);
    if (data.application_id != null) {
      this.setApplicationId(data.application_id);
    }
    try {
      if (!((ref = data.item_id) != null ? ref.length : void 0)) {
        throw new Error('item_id를 입력해주세요.');
      }
      if (!((ref1 = data.item_name) != null ? ref1.length : void 0)) {
        throw new Error('item_name을 입력해주세요.');
      }
      if (!((ref2 = data.item_desc) != null ? ref2.length : void 0)) {
        throw new Error('item_desc를 입력해주세요.');
      }
      if (data.item_uprice == null) {
        throw new Error('item_uprice를 입력해주세요.');
      }
      if (!((ref3 = data.item_image) != null ? ref3.length : void 0)) {
        throw new Error('item_image를 입력해주세요.');
      }
      if (!((ref4 = data.item_url) != null ? ref4.length : void 0)) {
        throw new Error('item_url을 입력해주세요.');
      }
    } catch (error1) {
      e = error1;
      return alert(e.message);
    }
    requestUrl = this.naverpayZzimUrl(data.test_mode ? 'development' : 'production', this.isMobile() ? 'mobile' : 'pc');
    encryptData = _aes2.default.encrypt(JSON.stringify(data), this.getData('sk'));
    return request.post([this.restUrl(), "npay/zzim.json"].join('/')).set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8').timeout({
      response: timeout,
      deadline: timeout
    }).send({
      data: encryptData.ciphertext.toString(_encBase2.default),
      session_key: encryptData.key.toString(_encBase2.default) + '##' + encryptData.iv.toString(_encBase2.default)
    }).end(function (error, response) {
      if (response.statusCode === 200) {
        document.body.insertAdjacentHTML('beforeend', '<div id="' + _this6.windowId + '">\n  <form id="__BOOTPAY_TOP_FORM__" name="__BOOTPAY_TOP_FORM__" action="' + [_this6.restUrl(), 'continue'].join('/') + '" method="post">\n</div>');
        document.__BOOTPAY_TOP_FORM__.innerHTML = '<input type="hidden" name="ITEM_ID" value="' + response.body.data.item_id + '" />\n<input type="hidden" name="SHOP_ID" value="' + response.body.data.shop_id + '" />';
        _this6.popupInstance = window.open("about:blank", 'bootpay_inner_popup', _this6.isMobile() ? '' : 'width=500,height=300,toolbar=no,location=no,status=no,scrollbar=no,menubar=no');
        document.__BOOTPAY_TOP_FORM__.action = requestUrl;
        document.__BOOTPAY_TOP_FORM__.target = 'bootpay_inner_popup';
        document.__BOOTPAY_TOP_FORM__.method = 'GET';
        return document.__BOOTPAY_TOP_FORM__.submit();
      } else {
        _logger2.default.error(response.body);
        return alert(response.body.message);
      }
    });
  },
  // thirdparty API 데이터
  setThirdPartyApi: function setThirdPartyApi(key, value) {
    return this.thirdPartyData[key] = value;
  },
  useOnestoreApi: function useOnestoreApi() {
    var thirdPartyOption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    thirdPartyOption.use = enable;
    return this.setThirdPartyApi('onestore', thirdPartyOption);
  }
};

window.BootPay.initialize();

exports.default = window.BootPay;